(function() {
  'use strict';

  angular
    .module('core')
    .controller('BookingsController', BookingsController);

  BookingsController.$inject = ['EventtypesService', 'PaymentstatusesService', 'TaxesService', '$scope', '$state', '$rootScope', '$mdDialog', '$mdToast', '$timeout', 'HallsService', 'MESSAGES', 'Notification', 'NewbookingsService', 'SearchBookingServices'];

  function BookingsController(EventtypesService, PaymentstatusesService, TaxesService, $scope, $state, $rootScope, $mdDialog, $mdToast, $timeout, HallsService, MESSAGES, Notification, NewbookingsService, SearchBookingServices) {
    $rootScope.isUserLoggedIn = true;

    $scope.model = {
      events: [],
      newBookings: NewbookingsService.query(),
      mColorFilter: 1,  
      eventTypes: EventtypesService.query(),
      paymentStatuses: PaymentstatusesService.query(),
      taxes: TaxesService.query(), 
    };

    $scope.ui = {
      mCalendarTitle: '',
      mColorFilter: 'payment',
      validateSettings: false,
    };

    $scope.searchParams = {
      selectedHalls: []
    };


    $scope.halls = {
      mAllHalls: HallsService.query()
    };

    $scope.chart = {
      labels: ["Query", "Advance paid", "Fully paid"],
      data: [45, 55, 30],
      colors: ["rgb(159,204,0)", "rgb(250,109,33)", "rgb(200,100,63)"],
      options: {
        title: {
          display: true,
          fontSize: 15,
          text: 'Payment summary for ' + $scope.ui.mCalendarTitle
        },
        legend: {
          display: true,
          position: "bottom"
        }
      }
    };

    $scope.loadinitial = function() {
      angular.forEach($scope.model.newBookings, function(newbooking) {
        eventsPush(newbooking);
      });
    };

    $scope.model.newBookings.$promise.then(function(result) {
      $scope.loadinitial();
    });

    $scope.selectedHallsChanged = function() {
      $scope.model.events.length = 0;
      $scope.model.newBookings.length = 0;
      SearchBookingServices.requestsearch($scope.searchParams).then(function(searchResults) {
        $scope.model.newBookings = searchResults;
        angular.forEach(searchResults, function(searchResult) {
          eventsPush(searchResult);
        });
      });
    };

    $scope.colorFilter = function() {
      $scope.model.events.length = 0;
      $scope.loadinitial();
      angular.element('#calendar').fullCalendar('removeEvents');
      angular.element('#calendar').fullCalendar('addEventSource', $scope.model.events);
    };

    var currentView = "month";


    //with this you can handle the events that generated by clicking the day(empty spot) in the calendar
    $scope.dayClick = function(date, allDay, jsEvent, view) {
      validateSettings();
      if (!$scope.ui.validateSettings) {
         console.log("day click date " + date);
        if (moment(date) < moment(new Date().setHours(0, 0, 0, 0))) {
          Notification.error({
            message: MESSAGES.PAST_DATE,
            title: '<i class="glyphicon glyphicon-remove"></i> Past Date Error !!!'
          });
        } else {
          var confirm = $mdDialog.confirm().title('Do you want to create new booking?').ok('Yes').cancel('No');

          var oldShow = $mdDialog.show;
          $mdDialog.show = function(options) {
            if (options.hasOwnProperty("skipHide")) {
              options.multiple = options.skipHide;
            }
            return oldShow(options);
          };

          $mdDialog.show(confirm).then(function() {
              $mdDialog.show({
                  controller: 'NewbookingsController',
                  templateUrl: 'modules/newbookings/client/views/form-newbooking.client.view.html',
                  parent: angular.element(document.body),
                  clickOutsideToClose: false,
                  fullscreen: true,
                  resolve: {
                    selectedDate: function() {
                      return date;
                    },
                    selectedEvent: function() {
                      return null;
                    }
                  },
                })
                .then(function(updatedItem) {
                  $scope.model.events.push(updatedItem);
                }, function() {
                  console.log('You cancelled the dialog.');
                });
            },
            function() {
              console.log("no");
            });
        }
      }

    };


    //with this you can handle the events that generated by droping any event to different position in the calendar
    $scope.alertOnDrop = function(event, dayDelta, minuteDelta, allDay, revertFunc, jsEvent, ui, view) {
      $scope.$apply();
    };


    //with this you can handle the events that generated by resizing any event to different position in the calendar
    $scope.alertOnResize = function(event, dayDelta, minuteDelta, revertFunc, jsEvent, ui, view) {
      $scope.$apply();
    };


    //with this you can handle the click on the events
    $scope.eventClick = function(event) {
      var oldShow = $mdDialog.show;
        $mdDialog.show = function(options) {
          if (options.hasOwnProperty("skipHide")) {
            options.multiple = options.skipHide;
          }
          return oldShow(options);
        };
      NewbookingsService.get({
        newbookingId: event._id
      }, function(data) {
        $mdDialog.show({
            controller: 'NewbookingsController',
            templateUrl: 'modules/newbookings/client/views/form-newbooking.client.view.html',
            parent: angular.element(document.body),
            clickOutsideToClose: false,
            fullscreen: true,
            resolve: {
              selectedDate: function() {
                return event.start;
              },
              selectedEvent: function() {
                return data;
              }
            },
          })
          .then(function(updatedItem) {
            var index = _.indexOf($scope.model.events, event);
            $scope.model.events[index] = updatedItem;
          }, function() {
            console.log('You cancelled the dialog.');
          });
      }, function(error) {
         Notification.error({
            message: error.data.message,
            title: '<i class="glyphicon glyphicon-remove"></i> Edit Halls Error !!!'
          });
      });
    };


    //with this you can handle the events that generated by each page render process
    $scope.renderView = function(view) {
      var date = new Date(view.calendar.getDate());
      $scope.currentDate = date.toDateString();

      $timeout(function() {
        $scope.$apply();
      });

      $scope.ui.mCalendarTitle = view.title;
    };


    //with this you can handle the events that generated when we change the view i.e. Month, Week and Day
    $scope.changeView = function(view, calendar) {
      currentView = view;

      $timeout(function() { //calendar is coming undefined, so i am using 'angular.element('#calendar')' with timeout
        angular.element('#calendar').fullCalendar('changeView', view);

        $scope.$apply();
      });
    };

    function eventsPush(booking) {
      var colorCode;
      if($scope.model.mColorFilter === 1 || $scope.model.mColorFilter === '1') {
        colorCode = booking.mSelectedPaymentStatus.colour.code;
      } else {
        colorCode = booking.mSelectedEventType.colour.code;
      }
      $scope.model.events.push({
        _id: booking._id,
        title: booking.mName,
        start: new Date(booking.mStartDateTime),
        end: new Date(booking.mEndDateTime),
        color: colorCode,
        stick: true
      });
    };

    function validateSettings() {
      if ($scope.halls.mAllHalls.length == 0) {
        Notification.error({
          message: "Please add halls in settings.",
          title: '<i class="glyphicon glyphicon-remove"></i> Halls Error !!!'
        });
        $scope.ui.validateSettings = true;
      }

      if ($scope.model.eventTypes.length == 0) {
        Notification.error({
          message: "Please add event types in settings.",
          title: '<i class="glyphicon glyphicon-remove"></i> Event Error !!!'
        });
        $scope.ui.validateSettings = true;
      }

      if ($scope.model.paymentStatuses.length == 0) {
        Notification.error({
          message: "Please add payment statuses in settings.",
          title: '<i class="glyphicon glyphicon-remove"></i> Payment status Error !!!'
        });
        $scope.ui.validateSettings = true;
      }
    };


    /* config object */
    $scope.uiConfig = {
      calendar: {
        height: 510,
        editable: false,
        displayEventTime: false,
        header: {
          left: 'title',
          center: '',
          right: 'today prev,next'
        },
        dayClick: $scope.dayClick,
        eventDrop: $scope.alertOnDrop,
        eventResize: $scope.alertOnResize,
        eventClick: $scope.eventClick,
        viewRender: $scope.renderView
      }
    };

    /* event sources array*/
    $scope.eventSources = [$scope.model.events];

  }
}());