(function() {
  'use strict';

  angular
    .module('core')
    .controller('BookingsController', BookingsController);

  BookingsController.$inject = ['bookedHallsResolve', 'CommonService', 'CALENDAR_CHANGE_VIEW', 'eventTypesResolve', 'paymentStatusesResolve', 'taxesResolve', 'counterResolve', '$scope', '$state', '$rootScope', '$mdDialog', '$timeout', 'hallsResolve', 'MESSAGES', 'Notification', 'NewbookingsService', 'SearchBookingServices', 'HARDCODE_VALUES', 'RECEIPT', 'INVOICE'];

  function BookingsController(bookedHallsResolve, CommonService, CALENDAR_CHANGE_VIEW, eventTypesResolve, paymentStatusesResolve, taxesResolve, counterResolve, $scope, $state, $rootScope, $mdDialog, $timeout, hallsResolve, MESSAGES, Notification, NewbookingsService, SearchBookingServices, HARDCODE_VALUES, RECEIPT, INVOICE) {
    $rootScope.isUserLoggedIn = true;
    $rootScope.isPastInvoiceReceiptEffectiveDate = true;

    var isPastReceiptEffectiveDate = false;
    var isPastInvoiceEffectiveDate = false;

    $scope.model = {
      events: [],
      newBookings: bookedHallsResolve,
      mColorFilter: 1,
      eventTypes: eventTypesResolve,
      paymentStatuses: paymentStatusesResolve,
      taxes: taxesResolve,
      counters: counterResolve
    };

    $scope.ui = {
      mCalendarTitle: '',
      mColorFilter: 'payment',
      validateSettings: false,
      renderView: undefined,
    };

    $scope.searchParams = {
      selectedHalls: hallsResolve
    };


    $scope.halls = {
      mAllHalls: hallsResolve
    };

    $scope.chart = {
      labels: [],
      data: [],
      colors: [],
      options: {
        title: {
          display: true,
          fontSize: 15,
          text: 'Payment summary ' + $scope.ui.mCalendarTitle
        },
        legend: {
          display: true,
          position: "bottom"
        }
      }
    };
    
    $scope.CALENDAR_CHANGE_VIEW = CALENDAR_CHANGE_VIEW;

    $scope.loadinitial = function() {
      angular.forEach($scope.model.newBookings, function(newbooking) {
        eventsPush(newbooking);
      });
      var date = new Date();
      chartViewByAgenda(CALENDAR_CHANGE_VIEW[2], date);
    };

    $scope.model.paymentStatuses.$promise.then(function(result) {
      $timeout(function() {
        $scope.loadinitial();
      }, 0, true);
    });

    $scope.model.counters.$promise.then(function(result) {
      $rootScope.isPastInvoiceReceiptEffectiveDate = isPastReceiptInvoiceEffectiveDate();
    });

    function isPastReceiptInvoiceEffectiveDate() {      

      var receiptCounters = _.filter($scope.model.counters, function(paramCounter) {
        return paramCounter.counterName === RECEIPT;
      });

      var invoiceCounters = _.filter($scope.model.counters, function(paramCounter) {
        return paramCounter.counterName === INVOICE;
      });

      if (receiptCounters.length > 0 && invoiceCounters.length > 0) {
        isPastReceiptEffectiveDate = (moment(receiptCounters[0].effectiveDate) <= moment(new Date().setHours(0, 0, 0, 0))) ? true : false;
        isPastInvoiceEffectiveDate = (moment(invoiceCounters[0].effectiveDate) <= moment(new Date().setHours(0, 0, 0, 0))) ? true : false;
      }

      return isPastReceiptEffectiveDate && isPastInvoiceEffectiveDate;
    }

    $scope.selectedHallsChanged = function() {
      $scope.model.events.length = 0;
      $scope.model.newBookings.length = 0;
      SearchBookingServices.requestsearch($scope.searchParams).then(function(searchResults) {
        $scope.model.newBookings = searchResults;
        angular.forEach(searchResults, function(searchResult) {
          eventsPush(searchResult);
        });
        chartSummary(searchResults);
      });
    };

    $scope.colorFilter = function() {
      $scope.model.events.length = 0;
      $scope.loadinitial();
      angular.element('#calendar').fullCalendar('removeEvents');
      angular.element('#calendar').fullCalendar('addEventSource', $scope.model.events);
    };

    var currentView = CALENDAR_CHANGE_VIEW[2];


    //with this you can handle the events that generated by clicking the day(empty spot) in the calendar
    $scope.dayClick = function(date, allDay, jsEvent, view) {
      validateSettings();
      if (!$scope.ui.validateSettings) {
        if (moment(date) < moment(new Date().setHours(0, 0, 0, 0))) {
          $mdDialog.show($mdDialog.alert().clickOutsideToClose(true).title(MESSAGES.PAST_DATE).ok('OK'));
        } else {
          var confirm = $mdDialog.confirm().title('Do you want to create new booking?').ok('Yes').cancel('No');

          var oldShow = $mdDialog.show;
          $mdDialog.show = function(options) {
            if (options.hasOwnProperty("skipHide")) {
              options.multiple = options.skipHide;
            }
            return oldShow(options);
          };

          $mdDialog.show(confirm).then(function() {
              $mdDialog.show({
                  controller: 'NewbookingsController',
                  templateUrl: 'modules/newbookings/client/views/form-newbooking.client.view.html',
                  parent: angular.element(document.body),
                  clickOutsideToClose: false,
                  fullscreen: true,
                  resolve: {
                    selectedDate: function() {
                      return date;
                    },
                    selectedEvent: function() {
                      return null;
                    },
                    viewMode: function() {
                      return false;
                    },
                    isPastReceiptEffectiveDate: function() {
                      return isPastReceiptEffectiveDate;
                    },
                    isPastInvoiceEffectiveDate: function() {
                      return isPastInvoiceEffectiveDate;
                    }
                  },
                })
                .then(function(updatedItem) {
                  $scope.model.newBookings.push(updatedItem);
                  eventsPush(updatedItem);
                  var moment = $scope.ui.renderView.calendar.getDate();
                  var date = new Date(moment.format());
                  chartViewByAgenda($scope.ui.renderView.name, date);
                }, function() {
                  console.log('You cancelled the dialog.');
                });
            },
            function() {
              console.log("no");
            });
        }
      }

    };


    //with this you can handle the events that generated by droping any event to different position in the calendar
    $scope.alertOnDrop = function(event, dayDelta, minuteDelta, allDay, revertFunc, jsEvent, ui, view) {
      $scope.$apply();
    };


    //with this you can handle the events that generated by resizing any event to different position in the calendar
    $scope.alertOnResize = function(event, dayDelta, minuteDelta, revertFunc, jsEvent, ui, view) {
      $scope.$apply();
    };


    //with this you can handle the click on the events
    $scope.eventClick = function(event) {
      var oldShow = $mdDialog.show;
      $mdDialog.show = function(options) {
        if (options.hasOwnProperty("skipHide")) {
          options.multiple = options.skipHide;
        }
        return oldShow(options);
      };
      NewbookingsService.get({
        newbookingId: event._id
      }, function(data) {
        $mdDialog.show({
            controller: 'NewbookingsController',
            templateUrl: 'modules/newbookings/client/views/form-newbooking.client.view.html',
            parent: angular.element(document.body),
            clickOutsideToClose: false,
            fullscreen: true,
            resolve: {
              selectedDate: function() {
                return event.start;
              },
              selectedEvent: function() {
                return data;
              },
              viewMode: function() {
                return true;
              },
              isPastReceiptEffectiveDate: function() {
                return isPastReceiptEffectiveDate;
              },
              isPastInvoiceEffectiveDate: function() {
                return isPastInvoiceEffectiveDate;
              }
            },
          })
          .then(function(updatedItem) {
            var index = findIndexByID($scope.model.events, event._id);
            var bookingIndex = findIndexByID($scope.model.newBookings, data._id);
            $scope.model.events.splice(index, 1);
            if (updatedItem.isDelete) {
              $scope.model.newBookings.splice(bookingIndex, 1);
            } else {
              $scope.model.newBookings[bookingIndex] = updatedItem;
              $timeout(function() {
                eventsPush(updatedItem);
                $scope.$apply();
              })
            }
            var view = $scope.ui.renderView;
            var moment = view.calendar.getDate();
            var date = new Date(moment.format());
            chartViewByAgenda(view.name, date);
          }, function() {
            console.log('You cancelled the dialog.');
          });
      });
    };

    // Receiving broadcast from newbookings.client.controller
    $scope.$on('newBooking', function(event, updatedItem) {

      $scope.model.newBookings.push(updatedItem);
      eventsPush(updatedItem);
      var moment = $scope.ui.renderView.calendar.getDate();
      var date = new Date(moment.format());
      chartViewByAgenda($scope.ui.renderView.name, date);
    });

    // Receiving broadcast from newbookings.client.controller
    $scope.$on('editBooking', function(event, updatedItem) {

      var index = findIndexByID($scope.model.events, event._id);
      var bookingIndex = findIndexByID($scope.model.newBookings, updatedItem._id);
      $scope.model.events.splice(index, 1);
      if (updatedItem.isDelete) {
        $scope.model.newBookings.splice(bookingIndex, 1);
      } else {
        $scope.model.newBookings[bookingIndex] = updatedItem;
        $timeout(function() {
          eventsPush(updatedItem);
          $scope.$apply();
        })
      }
      var view = $scope.ui.renderView;
      var moment = view.calendar.getDate();
      var date = new Date(moment.format());
      chartViewByAgenda(view.name, date);

    });

    //with this you can handle the events that generated by each page render process
    $scope.renderView = function(view) {
      $scope.ui.renderView = view;
      $scope.ui.mCalendarTitle = view.title;
      var moment = view.calendar.getDate();
      var date = new Date(moment.format());
      chartViewByAgenda(view.name, date);

      $timeout(function() {
        $scope.$apply();
      });
    };

    //with this you can handle the events that generated when we change the view i.e. Month, Week and Day
    $scope.changeView = function(view, calendar) {
      currentView = view;
      var moment = angular.element('#calendar').fullCalendar('getDate');
      var date = new Date(moment.format());
      chartViewByAgenda(view, date);

      $timeout(function() { //calendar is coming undefined, so i am using 'angular.element('#calendar')' with timeout
        angular.element('#calendar').fullCalendar('changeView', view);

        $scope.$apply();
      });
    };

    function eventsPush(booking) {
      var colorCode;
      if ($scope.model.mColorFilter === 1 || $scope.model.mColorFilter === '1') {
        //colorCode = booking.mSelectedPaymentStatus.colour.code;        
        for (var i = 0; i < $scope.model.paymentStatuses.length; i++) {
          if ($scope.model.paymentStatuses[i]._id === booking.mSelectedPaymentStatus._id) {
            colorCode = $scope.model.paymentStatuses[i].colour.code;
            break;
          }
        }

      } else {
        //colorCode = booking.mSelectedEventType.colour.code;
        for (var i = 0; i < $scope.model.eventTypes.length; i++) {
          if ($scope.model.eventTypes[i]._id === booking.mSelectedEventType._id) {
            colorCode = $scope.model.eventTypes[i].colour.code;
            break;
          }
        }
      }
      var bookingTitle = booking.mSelectedEventType.displayName;
      if (booking.mSelectedEventType.name.toLowerCase().trim() === HARDCODE_VALUES[0]) {
        bookingTitle = booking.mOtherEvent;
      }
      $scope.model.events.push({
        _id: booking._id,
        title: bookingTitle,
        start: new Date(booking.mStartDateTime),
        end: new Date(booking.mEndDateTime),
        color: colorCode,
        stick: true
      });
    };

    function validateSettings() {
      $scope.ui.validateSettings = false;

      if ($scope.halls.mAllHalls.length == 0) {
        Notification.error({
          message: "Please add halls in settings.",
          title: '<i class="glyphicon glyphicon-remove"></i> Halls Error'
        });
        $scope.ui.validateSettings = true;
      }

      if ($scope.model.eventTypes.length == 0) {
        Notification.error({
          message: "Please add event types in settings.",
          title: '<i class="glyphicon glyphicon-remove"></i> Event Error'
        });
        $scope.ui.validateSettings = true;
      }

      if ($scope.model.paymentStatuses.length < 2) {
        Notification.error({
          message: "Please add payment statuses in settings.",
          title: '<i class="glyphicon glyphicon-remove"></i> Payment status Error'
        });
        $scope.ui.validateSettings = true;
      }
      
      if (!CommonService.hasContainsReceiptNumber($scope.model.counters) || !CommonService.hasContainsInvoiceNumber($scope.model.counters)) {
        Notification.error({
          message: "Please add Receipt/Invoice start number in settings.",
          title: '<i class="glyphicon glyphicon-remove"></i> Receipt/Invoice Start Number Error'
        });
        $scope.ui.validateSettings = true;
      }      
    };    

    function chartSummary(bookedHalls) {
      $scope.chart.data.length = 0;
      $scope.chart.labels.length = 0;
      $scope.chart.colors.length = 0;
      if ($scope.model.mColorFilter === 1 || $scope.model.mColorFilter === '1') {
        paymentChart(bookedHalls);
      } else {
        eventTypeChart(bookedHalls);
      }
    };

    function paymentChart(bookedHalls) {
      $scope.chart.options.title.text = "Payment Summary for " + $scope.ui.mCalendarTitle;
      angular.forEach($scope.model.paymentStatuses, function(payment) {
        var length = CommonService.getPaymentCountFromBookedHall(bookedHalls, payment.name);
        $scope.chart.data.push(length);
        var name = payment.name;
        $scope.chart.labels.push(name.charAt(0).toUpperCase() + name.slice(1));
        $scope.chart.colors.push(payment.colour.code);
      });
    };

    function eventTypeChart(bookedHalls) {
      $scope.chart.options.title.text = "EventType Summary for " + $scope.ui.mCalendarTitle;
      angular.forEach($scope.model.eventTypes, function(eventType) {
        var length = CommonService.getEventTypeCountFromBookedHall(bookedHalls, eventType.name);
        $scope.chart.data.push(length);
        var name = eventType.displayName;
        $scope.chart.labels.push(name);
        $scope.chart.colors.push(eventType.colour.code);
      });
    };

    function chartViewByAgenda(view, date) {
      if (view === CALENDAR_CHANGE_VIEW[0]) {
        var bookedHalls = CommonService.findBookedHallsByDay($scope.model.newBookings, date);
        chartSummary(bookedHalls);
      } else if (view === CALENDAR_CHANGE_VIEW[1]) {
        var bookedHalls = CommonService.findBookedHallsByWeek($scope.model.newBookings, date);
        chartSummary(bookedHalls);
      } else {
        var bookedHalls = CommonService.findBookedHallsByMonth($scope.model.newBookings, date);
        chartSummary(bookedHalls);
      }
    };

    function findIndexByID(array, id) {
      return _.findIndex(array, function(o) {
        return o._id == id;
      });
    };


    /* config object */
    $scope.uiConfig = {
      calendar: {
        height: 510,
        editable: false,
        displayEventTime: false,
        header: {
          left: 'title',
          center: '',
          right: 'today prev,next'
        },
        dayClick: $scope.dayClick,
        eventDrop: $scope.alertOnDrop,
        eventResize: $scope.alertOnResize,
        eventClick: $scope.eventClick,
        viewRender: $scope.renderView,
        dayRender: function(date, cell) {
          if ((new Date(date).getFullYear() === new Date().getFullYear()) && (new Date(date).getMonth() === new Date().getMonth()) && (new Date(date).getDate() === new Date().getDate()))
            cell.css("background-color", "#00BFFF");
        }
      }
    };

    /* event sources array*/
    $scope.eventSources = [$scope.model.events];

  }
}());
